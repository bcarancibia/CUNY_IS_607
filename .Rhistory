v = matrix(c(3, -4), nrow=2, ncol=1)
v
u*v
u%*%v
u %*% v
1.5 + -2.0
u
length u
length(u)
3u - 2v
3(u)-2(v)
3*u
(3*u) - (2*v)
2*v
dot(u,v)
angle <- acos( sum(u*v) / ( sqrt(sum(u * u)) * sqrt(sum(v * v)) ) )
norm_u <- sqrt(sum(u*u))
norm_v <- sqrt(sum(v*v))
norm_u
e <- absolutely
e <c(1:10)
e <- c(1:10)
as.character(e)
length(e)
d <- as.character(e)
length(d)
drop d
d
drop d
rep(d, 10)
A <- matrix(c(1, 1, 3, 2, -1, 5, -1, -2, 4), ncol=3)
A
A <- matrix(c(1, 2, -1, 1, -1, -2, -3, 5, 4), ncol=3)  ####fill in matrix
A
A <- matrix(c(1, 2, -1, 1, -1, -2, 3, 5, 4), ncol=3)  ####fill in matrix
A
b <- < matrix (c(1, 2, 6), mcol=1)
b <- matrix (c(1, 2, 6), mcol=1)
b <- matrix (c(1, 2, 6), ncol=1)
b
x <- solve (A) %*% b
x
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
queue
queue <- c(queue, "Harold")
queue
queue[-0]
queue[-1]
queue[-1]
queue
queue <- queue[-1]
queue <- c("Mary", "Pam", "Steve", "Alex", "Patricia", "Harold")
queue <- queue[-6]
queue
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
queue
queue <- c(queue, "Harold")
queue
queue <- queue[-1]
queue
queue <- queue[2, "Pam"]
queue <- queue(2, "Pam")
queue <- c(queue(1), "Pam", queue)
queue
queue <- c(queue[1:], "Pam", queue{2:5})
queue <- c(queue[1:], "Pam", queue[2:5])
queue <- c(queue(1:), "Pam", queue(2:5))
queue
queue <- c("Mary", "Pam", "Steve", "Alex", "Patricia", "Harold")
queue
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
queue
queue <- c(queue, "Harold")
queue <- queue[-1]
queue
c(queue[1:1], "Pam", queue[2:5])
drop("Alex")
queue <- drop["Alex"]
queue <- drop("Alex")
####Benjamin Arancibia####
####Week 2 Assignment - Exercises####
####Question 1####
#(a)
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
queue
#(b)
queue <- c(queue, "Harold")
queue
#(c)
queue <- queue[-1]
queue
#(d)
c(queue[1:1], "Pam", queue[2:5])
queue
#(e)
queue <- queue[-6]
queue
#(f)
queue <- queue[-which(queue == "Alex")]
patricia
"Patricia"
match(c("Patricia"), queue)
length(queue)
a <- 1000/(3*7)
a <- 1000/(3*7)
b <- 1000/(3*11)
c <- 1000/(7*11)
d <- 1000/(3*7*11)
a <- 1000/(3*7)
b <- 1000/(3*11)
c <- 1000/(7*11)
d <- 1000/(3*7*11)
e <- (3*7) + (3*11) + (7*11) + (3*7*11)
numbers_prime <- e-a-b-c-d
triple <- function(a, b, c){
if ((a^2)+(b^2) == (c^2)) {
print sqrt(c)
} else if ((a^2)+(b^2) != (c^2)){
print("not triple")
}
}
triple (3,4,5)
triple <- function(a, b, c){
if ((a^2)+(b^2)=(c^2)) {
print sqrt(c)
} else if ((a^2)+(b^2) != (c^2)){
print("not triple")
}
}
triple <- function(a, b, c){
if (a^2 +b^2 =c^2) {
print sqrt(c)
} else if ((a^2)+(b^2) != (c^2)){
print("not triple")
}
}
triple <- function(a, b, c)
{
if (a^2 +b^2 =c^2)
{
print sqrt(c)
} else if (a^2+ b^2!=c^2)
{
print("not triple")
}
}
triple <- function(a, b, c)
{
if (a^2 +b^2 =c^2)
{
print sqrt(c)
} else if (a^2+ b^2!=c^2)
{
print("not triple")
}
}
if (a^2 +b^2 = c^2)
{
if (a%^%2 +b%^%2 == c%^%2)
{
triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
triple (3,4,5)
triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
triple(3,4,5)
check.triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
check.triple(3,4,5)
check.triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
check.triple(3,4,5)
check.triple(3, 4, 5)
check.triple <- function(a, b, c)
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
check.triple(3, 4, 5)
check.triple <- function()
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
check.triple <- function()
{
if (a%^%2 +b%^%2 == c%^%2)
{
print sqrt(c)
}  if (a%^%2 +b%^%2 == c%^%2)
{
print("not triple")
}
}
check.triple(3, 4, 5)
pythag <− function(x){
m <− x[1]
n <− x[2]
a <− m^2 - n^2
b <− 2 * m * n
c <− m^2 + n^2
print(c(a,b,c))
}
pythag <− function(x){
s <− x[1]
t <− x[2]
a <−t^2 - s^2
b <− 2 * s * t
c <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag <− function(x){
s <− x[1]
t <− x[2]
g <−t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag(3,4)
pythag <− function(x){
s <− x[1]
t <− x[2]
g <−t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag(3,4)
pythag <− function(3,4){
s <− x[1]
t <− x[2]
g <−t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag <− function(x){
s <− x[1]
t <− x[2]
g <−t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ",g,h,i,"\n")
}
pythag(3,4)
pythag (3,4)
pythag(1 2)
pythag (1 2)
pythag (1, 2)
set.pythag (1, 2)
require(MASS)
pythan:::(1,2)
source("pythag.R")
pythag <− function(1,2){
s <− x[1]
t <− x[2]
g <−t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ",g,h,i,"\n")
}
pythag <− function(1,2){
s <− x[1]
t <− x[2]
g <− t^2 - s^2
h <− 2 * s * t
i <− s^2 + t^2
cat("The Pythagorean triple is: ", g, h, i,"\n")
}
pythag <− function(x){
s <− x[1]
t <− x[2]
a <−t^2 - s^2
b <− 2 * s * t
c <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
a <- 1000/(3*7)
b <- 1000/(3*11)
c <- 1000/(7*11)
d <- 1000/(3*7*11)
e <- (3*7) + (3*11) + (7*11) + (3*7*11)
numbers_prime <- e-a-b-c-d
numbers_prime
####Question 4####
pythag <− function(x){
s <− x[1]
t <− x[2]
a <−t^2 - s^2
b <− 2 * s * t
c <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
f <- 1000/(3*7)
g <- 1000/(3*11)
h <- 1000/(7*11)
i <- 1000/(3*7*11)
e <- (3*7) + (3*11) + (7*11) + (3*7*11)
numbers_prime <- e-f-g-h-i
numbers_prime
####Benjamin Arancibia####
####Week 2 Assignment - Exercises####
####Question 1####
#(a)
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
queue
#(b)
queue <- c(queue, "Harold")
queue
#(c)
queue <- queue[-1]
queue
#(d)
c(queue[1:1], "Pam", queue[2:5])
queue
#(e)
queue <- queue[-6]
queue
#(f)
queue <- queue[-which(queue == "Alex")]
queue
#(g)
match(c("Patricia"), queue)
queue
#(h)
length(queue)
####Question 2####
#Question 21 from quiz, not entirely sure of this answer#
#this finds the slope if you want to find the length of a triangle just solve a^2+b^2=c^2
a=
b=
c=
qda0 = (-b + c(-1, 1) * sqrt(b^2 - 4 * a * c))/(2 * a)
qda1 <- qda(qda0)
####Question 3####
f <- 1000/(3*7)
g <- 1000/(3*11)
h <- 1000/(7*11)
i <- 1000/(3*7*11)
e <- (3*7) + (3*11) + (7*11) + (3*7*11)
numbers_prime <- e-f-g-h-i
numbers_prime
####Question 4####
pythag <− function(x){
s <− x[1]
t <− x[2]
a <−t^2 - s^2
b <− 2 * s * t
c <− s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag (1, 2)
pythag(1,2)
check_triple <- function(a,b,c)
{
if (a%*%a + b%*%b == c%*%c)
{
print("Triple!")
}
else if (a%*%a + b%*%b != c%*%c){
print("Not a triple!")
}
}
check_triple(3,4,5)
require(ggplot2)
data(diamonds)
head(diamonds)
rm(diamonds)
####Ben Arancibia####
####Ben Arancibia####
####Week 3 Quiz####
#####Question 1#####
obser_mean <- function(vector){
if(is.numeric(vector) == FALSE)
return ("This is not a vector")
else
return (mean(vector))
}
####Question 2####
obser_mean <- function(vector){
if(is.numeric(vector) == FALSE)
return ("This is not a vector")
else
return (mean(vector, na.rm = TRUE))
}
####Question 3####
gcdiv <- function(x,y) {
r <- x%%y;
return(ifelse(r, gcdiv(y, r), y))
}
gcdiv(c(590, 10), c(45, 9))
####Question 4####
euclid_alg <- function(x,y) {
r <- x%%y;
return(ifelse(r, euclid_alg(y, r), y))
}
euclid_alg(c(590, 10), c(45, 9))
####Question 5####
two_inputs <- function(x, y) {
return ((x*x*y) + (2*x*y) - (x*y*y))
}
####Question 6####
setwd("/users/bcarancibia/CUNY_IS_607")
price <- read.table("week-3-price-data.csv", header = TRUE, sep = ",")
make_model <- read.table("week-3-make-model-data.csv", header = TRUE, sep = ",")
prc_mk_mdl <- merge(x = price, y = make_model, by.x = "ModelNumber", by.y = "ModelNumber")
####Question 7####
setwd("/users/bcarancibia/CUNY_IS_607")
price <- read.table("week-3-price-data.csv", header = TRUE, sep = ",")
make_model <- read.table("week-3-make-model-data.csv", header = TRUE, sep = ",")
prc_mk_mdl_ALL <- merge(x = price, y = make_model, by.x = "ModelNumber", by.y = "ModelNumber", all = TRUE)
####Question 8####
vehicles_2010 <- subset(prc_mk_mdl_ALL, Year == 2010)
head(vehicles_2010)
####Question 9####
red_vehicles_2010 <- subset(prc_mk_mdl_ALL, Color == "Red" & Price > 10000)
head(red_vehicles_2010)
####Question 10####
vehicles_removed <- red_vehicles_2010 [,!(names(red_vehicles_2010) %in% c("ModelNumber", "Color"))]
head(vehicles_removed)
####Question 11####
elements_in_char <- function(char_vector){
num.chars <- nchar(char_vector)
return(num.chars)
}
####Question 12####
char_concat <- function(one, two) {
if (length(one) != length(two)) {
return("Needs to be same length, please!")
}
else
return(mapply(paste, one, two, sep = " "))
}
####Question 13####
require(stringr)
char_to_substring <- function(char_vector) {
vowels_replace <- str_detect(char_vector, ignore.case("[aeiou]"))
return (str_extract(char_vector[vowels_replace],  ignore.case("[aeiou]\\w{0,2}")))
}
####Question 14####
require(lubridate)
month = c(5,6,7,8,9,10,11)
day = c(6,7,8,9,10,11,12)
year = c(2008,2009,2010,2011,2012,2013,2014)
df <- data.frame(day,month,year)
df["FULLDate"] <- NA
df$FULLDate <- ISOdatetime(df$y, df$m, df$d,0,0,0)
####Question 15####
require(lubridate)
string_date <- "05-09-1989"
real_date <- mdy(string_date)
####Question 16####
require(lubridate)
string_date <- "05-09-1989"
real_date <- mdy(string_date)
month(real_date)
####Question 17####
date_sequence <- seq(as.Date("2005/1/1"), as.Date("2014/12/31"), "days")
head(date_sequence)
